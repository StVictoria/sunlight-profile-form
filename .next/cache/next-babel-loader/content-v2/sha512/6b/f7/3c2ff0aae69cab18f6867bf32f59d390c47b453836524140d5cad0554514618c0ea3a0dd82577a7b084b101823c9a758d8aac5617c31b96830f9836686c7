{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vstepnova\\\\Desktop\\\\test sunlight\\\\components\\\\UserForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Form, Field } from \"react-final-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\nimport { validateForm, isFieldError } from \"../utils/validate\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport CustomButton from \"./common/CustomButtons\";\nconst fields = [{\n  id: 0,\n  name: \"userName\",\n  label: \"Фамилия и имя\",\n  placeholder: \"Укажите Вашу вамилию и имя\",\n  type: \"text\",\n  iconPath: \"/badge.png\"\n}, {\n  id: 1,\n  name: \"email\",\n  label: \"E-mail\",\n  placeholder: \"ivanova@mail.ru\",\n  type: \"email\",\n  iconPath: \"/mail.png\"\n}, {\n  id: 2,\n  name: \"phoneNumber\",\n  label: \"Номер телефона\",\n  type: \"tel\",\n  placeholder: \"Укажите номер телефона\",\n  iconPath: \"/phone.png\"\n}];\nexport default function UserForm({\n  isFormOpen,\n  handleDialogOpen\n}) {\n  const {\n    0: isError,\n    1: setError\n  } = useState(false);\n\n  const handleFormSubmit = values => {\n    handleDialogOpen(); // axios\n    //   .post(\"http://localhost:3005/api\", JSON.stringify(values))\n    //   .catch((error) => console.log(error.response));\n\n    console.log(values);\n  };\n\n  const renderUserForm = fields => fields.map(field => __jsx(React.Fragment, {\n    key: field.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(Field, {\n    name: field.name,\n    className: UserFormStyles.TextField,\n    render: (_ref) => {\n      let {\n        input,\n        meta\n      } = _ref,\n          rest = _objectWithoutProperties(_ref, [\"input\", \"meta\"]);\n\n      return __jsx(\"div\", {\n        className: UserFormStyles.FieldItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: field.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }\n      }, __jsx(\"img\", {\n        src: field.iconPath,\n        className: UserFormStyles.FieldIcon,\n        alt: field.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      })), __jsx(TextField, _extends({\n        id: field.name\n      }, input, rest, {\n        placeholder: field.placeholder,\n        type: field.type,\n        error: isFieldError(meta),\n        label: field.label,\n        className: UserFormStyles.TextField,\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }\n      })), __jsx(ErrorMessage, {\n        meta: meta,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), fields.length - 1 !== field.id ? __jsx(\"div\", {\n    className: UserFormStyles.Divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }) : null));\n\n  return __jsx(Paper, {\n    className: UserFormStyles.UserFormMuiPaper,\n    style: isFormOpen ? {\n      display: \"block\"\n    } : {\n      display: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, __jsx(Form, {\n    onSubmit: handleFormSubmit,\n    validate: validateForm,\n    render: ({\n      handleSubmit,\n      values\n    }) => __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      className: UserFormStyles.UserForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, __jsx(\"section\", {\n      className: UserFormStyles.MainFormContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, renderUserForm(fields)), __jsx(CustomButton, {\n      name: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\",\n      type: \"submit\",\n      onClick: () => console.log(\"submit\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/vstepnova/Desktop/test sunlight/components/UserForm.js"],"names":["useState","Paper","Form","Field","TextField","UserFormStyles","validateForm","isFieldError","ErrorMessage","CustomButton","fields","id","name","label","placeholder","type","iconPath","UserForm","isFormOpen","handleDialogOpen","isError","setError","handleFormSubmit","values","console","log","renderUserForm","map","field","input","meta","rest","FieldItem","FieldIcon","length","Divider","UserFormMuiPaper","display","handleSubmit","MainFormContent"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\r\nimport { validateForm, isFieldError } from \"../utils/validate\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport CustomButton from \"./common/CustomButtons\";\r\n\r\nconst fields = [\r\n  {\r\n    id: 0,\r\n    name: \"userName\",\r\n    label: \"Фамилия и имя\",\r\n    placeholder: \"Укажите Вашу вамилию и имя\",\r\n    type: \"text\",\r\n    iconPath: \"/badge.png\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"email\",\r\n    label: \"E-mail\",\r\n    placeholder: \"ivanova@mail.ru\",\r\n    type: \"email\",\r\n    iconPath: \"/mail.png\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"phoneNumber\",\r\n    label: \"Номер телефона\",\r\n    type: \"tel\",\r\n    placeholder: \"Укажите номер телефона\",\r\n    iconPath: \"/phone.png\",\r\n  },\r\n];\r\n\r\nexport default function UserForm({ isFormOpen, handleDialogOpen }) {\r\n  const [isError, setError] = useState(false);\r\n\r\n  const handleFormSubmit = (values) => {\r\n    handleDialogOpen();\r\n    // axios\r\n    //   .post(\"http://localhost:3005/api\", JSON.stringify(values))\r\n    //   .catch((error) => console.log(error.response));\r\n\r\n    console.log(values);\r\n  };\r\n\r\n  const renderUserForm = (fields) =>\r\n    fields.map((field) => (\r\n      <React.Fragment key={field.id}>\r\n        <Field\r\n          name={field.name}\r\n          className={UserFormStyles.TextField}\r\n          render={({ input, meta, ...rest }) => (\r\n            <div className={UserFormStyles.FieldItem}>\r\n              <label htmlFor={field.id}>\r\n                <img\r\n                  src={field.iconPath}\r\n                  className={UserFormStyles.FieldIcon}\r\n                  alt={field.label}\r\n                />\r\n              </label>\r\n              <TextField\r\n                id={field.name}\r\n                {...input}\r\n                {...rest}\r\n                placeholder={field.placeholder}\r\n                type={field.type}\r\n                error={isFieldError(meta)}\r\n                label={field.label}\r\n                className={UserFormStyles.TextField}\r\n                variant=\"outlined\"\r\n              />\r\n              <ErrorMessage meta={meta} />\r\n            </div>\r\n          )}\r\n        />\r\n        {fields.length - 1 !== field.id ? (\r\n          <div className={UserFormStyles.Divider} />\r\n        ) : null}\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return (\r\n    <Paper\r\n      className={UserFormStyles.UserFormMuiPaper}\r\n      style={isFormOpen ? { display: \"block\" } : { display: \"none\" }}\r\n    >\r\n      <Form\r\n        onSubmit={handleFormSubmit}\r\n        validate={validateForm}\r\n        render={({ handleSubmit, values }) => (\r\n          <form onSubmit={handleSubmit} className={UserFormStyles.UserForm}>\r\n            <section className={UserFormStyles.MainFormContent}>\r\n              {renderUserForm(fields)}\r\n            </section>\r\n\r\n            <CustomButton\r\n              name=\"Сохранить изменения\"\r\n              type=\"submit\"\r\n              onClick={() => console.log(\"submit\")}\r\n            />\r\n            {/* <p className={UserFormStyles.SuccessMessage}>\r\n              Изменения сохранены! (но это не точно)\r\n            </p> */}\r\n          </form>\r\n        )}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}