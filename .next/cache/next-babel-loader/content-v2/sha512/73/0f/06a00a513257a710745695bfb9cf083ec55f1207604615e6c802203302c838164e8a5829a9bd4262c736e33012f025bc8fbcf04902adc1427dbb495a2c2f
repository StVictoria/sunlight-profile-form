{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vstepnova\\\\Desktop\\\\test sunlight\\\\components\\\\Profile.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport ProfileStyles from \"../styles/Profile.module.scss\";\nimport UserForm from \"./UserForm.js\";\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (false) {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      } // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport default function Profile({\n  isFormOpen,\n  onFormClose,\n  handleDialogOpen\n}) {\n  const size = useWindowSize();\n  console.log(size);\n  return __jsx(\"section\", {\n    className: ProfileStyles.Profile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(Paper, {\n    className: ProfileStyles.UserInfoMuiPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: ProfileStyles.MainInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: `${ProfileStyles.ProfileUserIcon} UserIcon`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: ProfileStyles.UserName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, size.width < 969 ? \"Иванова Анна Михайловна\" : \"Иванова А. М.\")), size.width < 959 ? __jsx(IconButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(CloseIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  })) : __jsx(Button, {\n    className: ProfileStyles.CloseButton,\n    onClick: onFormClose,\n    color: \"primary\",\n    endIcon: isFormOpen ? __jsx(CloseIcon, {\n      className: ProfileStyles.CloseIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }) : __jsx(KeyboardArrowDownIcon, {\n      className: ProfileStyles.CloseIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, isFormOpen ? \"Закрыть\" : \"Открыть\")), __jsx(UserForm, {\n    handleDialogOpen: handleDialogOpen,\n    isFormOpen: isFormOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/vstepnova/Desktop/test sunlight/components/Profile.js"],"names":["useState","useEffect","Paper","Button","IconButton","CloseIcon","KeyboardArrowDownIcon","ProfileStyles","UserForm","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Profile","isFormOpen","onFormClose","handleDialogOpen","size","console","log","UserInfoMuiPaper","MainInfo","ProfileUserIcon","UserName","CloseButton"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\n\r\nimport ProfileStyles from \"../styles/Profile.module.scss\";\r\nimport UserForm from \"./UserForm.js\";\r\n\r\nfunction useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // only execute all the code below in client side\r\n    if (typeof window !== \"undefined\") {\r\n      // Handler to call on window resize\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n\r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n  return windowSize;\r\n}\r\n\r\nexport default function Profile({ isFormOpen, onFormClose, handleDialogOpen }) {\r\n  const size = useWindowSize();\r\n  console.log(size);\r\n  return (\r\n    <section className={ProfileStyles.Profile}>\r\n      <Paper className={ProfileStyles.UserInfoMuiPaper}>\r\n        <section className={ProfileStyles.MainInfo}>\r\n          <div className={`${ProfileStyles.ProfileUserIcon} UserIcon`} />\r\n          <p className={ProfileStyles.UserName}>\r\n            {size.width < 969 ? \"Иванова Анна Михайловна\" : \"Иванова А. М.\"}\r\n          </p>\r\n        </section>\r\n\r\n        {size.width < 959 ? (\r\n          <IconButton>\r\n            <CloseIcon color=\"primary\" />\r\n          </IconButton>\r\n        ) : (\r\n          <Button\r\n            className={ProfileStyles.CloseButton}\r\n            onClick={onFormClose}\r\n            color=\"primary\"\r\n            endIcon={\r\n              isFormOpen ? (\r\n                <CloseIcon className={ProfileStyles.CloseIcon} />\r\n              ) : (\r\n                <KeyboardArrowDownIcon className={ProfileStyles.CloseIcon} />\r\n              )\r\n            }\r\n          >\r\n            {isFormOpen ? \"Закрыть\" : \"Открыть\"}\r\n          </Button>\r\n        )}\r\n      </Paper>\r\n      <UserForm handleDialogOpen={handleDialogOpen} isFormOpen={isFormOpen} />\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}