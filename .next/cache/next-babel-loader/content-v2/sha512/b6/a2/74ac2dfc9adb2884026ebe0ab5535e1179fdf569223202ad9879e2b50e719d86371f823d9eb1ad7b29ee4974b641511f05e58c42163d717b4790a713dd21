{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vstepnova/Desktop/test sunlight/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _extends from \"C:/Users/vstepnova/Desktop/test sunlight/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"C:/Users/vstepnova/Desktop/test sunlight/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"C:/Users/vstepnova/Desktop/test sunlight/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vstepnova\\\\Desktop\\\\test sunlight\\\\components\\\\UserForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Form, Field } from \"react-final-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\nimport { validateForm, isFieldError } from \"../utils/validate\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport CustomButton from \"./common/CustomButton\";\nvar fields = [{\n  id: 0,\n  name: \"userName\",\n  label: \"Фамилия и имя\",\n  placeholder: \"Укажите Вашу вамилию и имя\",\n  type: \"text\",\n  iconPath: \"/badge.png\"\n}, {\n  id: 1,\n  name: \"email\",\n  label: \"E-mail\",\n  placeholder: \"ivanova@mail.ru\",\n  type: \"email\",\n  iconPath: \"/mail.png\"\n}, {\n  id: 2,\n  name: \"phoneNumber\",\n  label: \"Номер телефона\",\n  type: \"tel\",\n  placeholder: \"Укажите номер телефона\",\n  iconPath: \"/phone.png\"\n}];\nexport default function UserForm(_ref) {\n  _s();\n\n  var _this = this;\n\n  var isFormOpen = _ref.isFormOpen,\n      handleDialogOpen = _ref.handleDialogOpen;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      isError = _useState2[0],\n      setError = _useState2[1];\n\n  function handleFormSubmit(_x) {\n    return _handleFormSubmit.apply(this, arguments);\n  }\n\n  function _handleFormSubmit() {\n    _handleFormSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var _response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.post(\"http://localhost:3005/api\", JSON.stringify(values));\n\n            case 3:\n              _response = _context.sent;\n              setLoading(true);\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0.response);\n              setLoading(false);\n\n            case 11:\n              setLoading(false);\n              handleDialogOpen();\n              console.log(response);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n    return _handleFormSubmit.apply(this, arguments);\n  }\n\n  var renderUserForm = function renderUserForm(fields) {\n    return fields.map(function (field) {\n      return __jsx(React.Fragment, {\n        key: field.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, __jsx(Field, {\n        name: field.name,\n        className: UserFormStyles.TextField,\n        render: function render(_ref2) {\n          var input = _ref2.input,\n              meta = _ref2.meta,\n              rest = _objectWithoutProperties(_ref2, [\"input\", \"meta\"]);\n\n          return __jsx(\"div\", {\n            className: UserFormStyles.FieldItem,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 13\n            }\n          }, __jsx(\"label\", {\n            htmlFor: field.id,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }\n          }, __jsx(\"img\", {\n            src: field.iconPath,\n            className: UserFormStyles.FieldIcon,\n            alt: field.label,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }\n          })), __jsx(TextField, _extends({\n            id: field.name\n          }, input, rest, {\n            placeholder: field.placeholder,\n            type: field.type,\n            error: isFieldError(meta),\n            label: field.label,\n            className: UserFormStyles.TextField,\n            variant: \"outlined\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }\n          })), __jsx(ErrorMessage, {\n            meta: meta,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }\n          }));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }), fields.length - 1 !== field.id ? __jsx(\"div\", {\n        className: UserFormStyles.Divider,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }) : null);\n    });\n  };\n\n  return __jsx(Paper, {\n    className: UserFormStyles.UserFormMuiPaper,\n    style: isFormOpen ? {\n      display: \"block\"\n    } : {\n      display: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(Form, {\n    onSubmit: handleFormSubmit,\n    validate: validateForm,\n    render: function render(_ref3) {\n      var handleSubmit = _ref3.handleSubmit,\n          values = _ref3.values;\n      return __jsx(\"form\", {\n        onSubmit: handleSubmit,\n        className: UserFormStyles.UserForm,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, __jsx(\"section\", {\n        className: UserFormStyles.MainFormContent,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, renderUserForm(fields)), __jsx(CustomButton, {\n        name: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\",\n        type: \"submit\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(UserForm, \"PZuJpiiq6lo7fLijO15XRQGvkno=\");\n\n_c = UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["C:/Users/vstepnova/Desktop/test sunlight/components/UserForm.js"],"names":["useState","axios","Paper","Form","Field","TextField","UserFormStyles","validateForm","isFieldError","ErrorMessage","CustomButton","fields","id","name","label","placeholder","type","iconPath","UserForm","isFormOpen","handleDialogOpen","isLoading","setLoading","isError","setError","handleFormSubmit","values","post","JSON","stringify","response","console","log","renderUserForm","map","field","input","meta","rest","FieldItem","FieldIcon","length","Divider","UserFormMuiPaper","display","handleSubmit","MainFormContent"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\r\nimport { validateForm, isFieldError } from \"../utils/validate\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport CustomButton from \"./common/CustomButton\";\r\n\r\nconst fields = [\r\n  {\r\n    id: 0,\r\n    name: \"userName\",\r\n    label: \"Фамилия и имя\",\r\n    placeholder: \"Укажите Вашу вамилию и имя\",\r\n    type: \"text\",\r\n    iconPath: \"/badge.png\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"email\",\r\n    label: \"E-mail\",\r\n    placeholder: \"ivanova@mail.ru\",\r\n    type: \"email\",\r\n    iconPath: \"/mail.png\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"phoneNumber\",\r\n    label: \"Номер телефона\",\r\n    type: \"tel\",\r\n    placeholder: \"Укажите номер телефона\",\r\n    iconPath: \"/phone.png\",\r\n  },\r\n];\r\n\r\nexport default function UserForm({ isFormOpen, handleDialogOpen }) {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n\r\n  async function handleFormSubmit(values) {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:3005/api\",\r\n        JSON.stringify(values)\r\n      );\r\n      setLoading(true);\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      setLoading(false);\r\n    }\r\n    setLoading(false);\r\n    handleDialogOpen();\r\n\r\n    console.log(response);\r\n  }\r\n\r\n  const renderUserForm = (fields) =>\r\n    fields.map((field) => (\r\n      <React.Fragment key={field.id}>\r\n        <Field\r\n          name={field.name}\r\n          className={UserFormStyles.TextField}\r\n          render={({ input, meta, ...rest }) => (\r\n            <div className={UserFormStyles.FieldItem}>\r\n              <label htmlFor={field.id}>\r\n                <img\r\n                  src={field.iconPath}\r\n                  className={UserFormStyles.FieldIcon}\r\n                  alt={field.label}\r\n                />\r\n              </label>\r\n              <TextField\r\n                id={field.name}\r\n                {...input}\r\n                {...rest}\r\n                placeholder={field.placeholder}\r\n                type={field.type}\r\n                error={isFieldError(meta)}\r\n                label={field.label}\r\n                className={UserFormStyles.TextField}\r\n                variant=\"outlined\"\r\n              />\r\n              <ErrorMessage meta={meta} />\r\n            </div>\r\n          )}\r\n        />\r\n        {fields.length - 1 !== field.id ? (\r\n          <div className={UserFormStyles.Divider} />\r\n        ) : null}\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return (\r\n    <Paper\r\n      className={UserFormStyles.UserFormMuiPaper}\r\n      style={isFormOpen ? { display: \"block\" } : { display: \"none\" }}\r\n    >\r\n      <Form\r\n        onSubmit={handleFormSubmit}\r\n        validate={validateForm}\r\n        render={({ handleSubmit, values }) => (\r\n          <form onSubmit={handleSubmit} className={UserFormStyles.UserForm}>\r\n            <section className={UserFormStyles.MainFormContent}>\r\n              {renderUserForm(fields)}\r\n            </section>\r\n\r\n            <CustomButton name=\"Сохранить изменения\" type=\"submit\" />\r\n          </form>\r\n        )}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}