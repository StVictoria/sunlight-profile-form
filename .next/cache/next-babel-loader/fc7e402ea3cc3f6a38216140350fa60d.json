{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vstepnova\\\\Desktop\\\\\\u0442\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\\\test1\\\\components\\\\UserForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Form, Field } from \"react-final-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\nimport { validateForm, isFieldError } from \"../utils/validate\";\nvar styles = {\n  MuiPaper: {\n    background: \"#FFFFFF\",\n    padding: 45,\n    boxSizing: \"border-box\",\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.15)\",\n    borderRadius: 10\n  },\n  TextField: {\n    height: 57,\n    width: 254,\n    left: 0\n  }\n};\nvar fields = [{\n  id: 0,\n  name: \"userName\",\n  label: \"Фамилия и имя\",\n  iconPath: \"/badge.png\"\n}, {\n  id: 1,\n  name: \"email\",\n  label: \"E-mail\",\n  iconPath: \"/mail.png\"\n}, {\n  id: 2,\n  name: \"phoneNumber\",\n  label: \"Номер телефона\",\n  iconPath: \"/phone.png\"\n}];\nexport default function UserForm(_ref) {\n  _s();\n\n  var _this = this;\n\n  var handleDialogOpen = _ref.handleDialogOpen;\n\n  var _useState = useState(false),\n      isError = _useState[0],\n      setError = _useState[1];\n\n  var handleFormSubmit = function handleFormSubmit(values) {\n    handleDialogOpen(); // axios\n    //   .post(\"http://localhost:3005/api\", JSON.stringify(values))\n    //   .catch((error) => console.log(error.response));\n\n    console.log(values);\n  };\n\n  var renderUserForm = function renderUserForm(fields) {\n    return fields.map(function (field) {\n      return __jsx(React.Fragment, {\n        key: field.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, __jsx(Field, {\n        name: field.name,\n        style: styles.TextField,\n        render: function render(_ref2) {\n          var input = _ref2.input,\n              meta = _ref2.meta,\n              rest = _objectWithoutProperties(_ref2, [\"input\", \"meta\"]);\n\n          return __jsx(\"div\", {\n            className: UserFormStyles.FieldItem,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 13\n            }\n          }, __jsx(\"label\", {\n            htmlFor: field.id,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }\n          }, __jsx(\"img\", {\n            src: field.iconPath,\n            className: UserFormStyles.FieldIcon,\n            alt: field.label,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }\n          })), __jsx(TextField, _extends({\n            id: field.name\n          }, input, rest, {\n            error: isFieldError(meta),\n            label: field.label,\n            style: styles.TextField,\n            variant: \"outlined\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }\n          })));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }), fields.length - 1 !== field.id ? __jsx(\"div\", {\n        className: UserFormStyles.Divider,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }) : null);\n    });\n  };\n\n  return __jsx(Paper, {\n    style: styles.MuiPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, __jsx(Form, {\n    onSubmit: handleFormSubmit,\n    validate: validateForm,\n    render: function render(_ref3) {\n      var handleSubmit = _ref3.handleSubmit,\n          values = _ref3.values;\n      return __jsx(\"form\", {\n        onSubmit: handleSubmit,\n        className: UserFormStyles.UserForm,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, __jsx(\"section\", {\n        className: UserFormStyles.MainFormContent,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, renderUserForm(fields)), __jsx(\"button\", {\n        type: \"submit\",\n        className: UserFormStyles.SubmitButton,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\"));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(UserForm, \"4P7KcR+/j0aEKeTIpJdOMtDvB9E=\");\n\n_c = UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["C:/Users/vstepnova/Desktop/тестовые задания/test1/components/UserForm.js"],"names":["useState","axios","Paper","Form","Field","TextField","FormGroup","UserFormStyles","validateForm","isFieldError","styles","MuiPaper","background","padding","boxSizing","boxShadow","borderRadius","height","width","left","fields","id","name","label","iconPath","UserForm","handleDialogOpen","isError","setError","handleFormSubmit","values","console","log","renderUserForm","map","field","input","meta","rest","FieldItem","FieldIcon","length","Divider","handleSubmit","MainFormContent","SubmitButton"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\n\r\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\r\nimport { validateForm, isFieldError } from \"../utils/validate\";\r\n\r\nconst styles = {\r\n  MuiPaper: {\r\n    background: \"#FFFFFF\",\r\n    padding: 45,\r\n    boxSizing: \"border-box\",\r\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.15)\",\r\n    borderRadius: 10,\r\n  },\r\n  TextField: {\r\n    height: 57,\r\n    width: 254,\r\n    left: 0,\r\n  },\r\n};\r\n\r\nconst fields = [\r\n  { id: 0, name: \"userName\", label: \"Фамилия и имя\", iconPath: \"/badge.png\" },\r\n  { id: 1, name: \"email\", label: \"E-mail\", iconPath: \"/mail.png\" },\r\n  {\r\n    id: 2,\r\n    name: \"phoneNumber\",\r\n    label: \"Номер телефона\",\r\n    iconPath: \"/phone.png\",\r\n  },\r\n];\r\n\r\nexport default function UserForm({ handleDialogOpen }) {\r\n  const [isError, setError] = useState(false);\r\n\r\n  const handleFormSubmit = (values) => {\r\n    handleDialogOpen();\r\n    // axios\r\n    //   .post(\"http://localhost:3005/api\", JSON.stringify(values))\r\n    //   .catch((error) => console.log(error.response));\r\n\r\n    console.log(values);\r\n  };\r\n\r\n  const renderUserForm = (fields) =>\r\n    fields.map((field) => (\r\n      <React.Fragment key={field.id}>\r\n        <Field\r\n          name={field.name}\r\n          style={styles.TextField}\r\n          render={({ input, meta, ...rest }) => (\r\n            <div className={UserFormStyles.FieldItem}>\r\n              <label htmlFor={field.id}>\r\n                <img\r\n                  src={field.iconPath}\r\n                  className={UserFormStyles.FieldIcon}\r\n                  alt={field.label}\r\n                />\r\n              </label>\r\n              <TextField\r\n                id={field.name}\r\n                {...input}\r\n                {...rest}\r\n                error={isFieldError(meta)}\r\n                label={field.label}\r\n                style={styles.TextField}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          )}\r\n        />\r\n        {fields.length - 1 !== field.id ? (\r\n          <div className={UserFormStyles.Divider} />\r\n        ) : null}\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return (\r\n    <Paper style={styles.MuiPaper}>\r\n      <Form\r\n        onSubmit={handleFormSubmit}\r\n        validate={validateForm}\r\n        render={({ handleSubmit, values }) => (\r\n          <form onSubmit={handleSubmit} className={UserFormStyles.UserForm}>\r\n            <section className={UserFormStyles.MainFormContent}>\r\n              {renderUserForm(fields)}\r\n            </section>\r\n\r\n            <button type=\"submit\" className={UserFormStyles.SubmitButton}>\r\n              Сохранить изменения\r\n            </button>\r\n            {/* <p className={UserFormStyles.SuccessMessage}>\r\n              Изменения сохранены! (но это не точно)\r\n            </p> */}\r\n          </form>\r\n        )}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}