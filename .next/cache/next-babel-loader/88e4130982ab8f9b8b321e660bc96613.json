{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vstepnova\\\\Desktop\\\\test sunlight\\\\components\\\\UserForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Form, Field } from \"react-final-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\nimport { validateForm, isFieldError } from \"../utils/validate\";\nimport ErrorMessage from \"./ErrorMessage\";\nvar fields = [{\n  id: 0,\n  name: \"userName\",\n  label: \"Фамилия и имя\",\n  placeholder: \"Укажите Вашу вамилию и имя\",\n  type: \"text\",\n  iconPath: \"/badge.png\"\n}, {\n  id: 1,\n  name: \"email\",\n  label: \"E-mail\",\n  placeholder: \"ivanova@mail.ru\",\n  type: \"email\",\n  iconPath: \"/mail.png\"\n}, {\n  id: 2,\n  name: \"phoneNumber\",\n  label: \"Номер телефона\",\n  type: \"tel\",\n  placeholder: \"Укажите номер телефона\",\n  iconPath: \"/phone.png\"\n}];\nexport default function UserForm(_ref) {\n  _s();\n\n  var _this = this;\n\n  var isFormOpen = _ref.isFormOpen,\n      handleDialogOpen = _ref.handleDialogOpen;\n\n  var _useState = useState(false),\n      isError = _useState[0],\n      setError = _useState[1];\n\n  var handleFormSubmit = function handleFormSubmit(values) {\n    handleDialogOpen(); // axios\n    //   .post(\"http://localhost:3005/api\", JSON.stringify(values))\n    //   .catch((error) => console.log(error.response));\n\n    console.log(values);\n  };\n\n  var renderUserForm = function renderUserForm(fields) {\n    return fields.map(function (field) {\n      return __jsx(React.Fragment, {\n        key: field.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, __jsx(Field, {\n        name: field.name,\n        className: UserFormStyles.TextField,\n        render: function render(_ref2) {\n          var input = _ref2.input,\n              meta = _ref2.meta,\n              rest = _objectWithoutProperties(_ref2, [\"input\", \"meta\"]);\n\n          return __jsx(\"div\", {\n            className: UserFormStyles.FieldItem,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 13\n            }\n          }, __jsx(\"label\", {\n            htmlFor: field.id,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }\n          }, __jsx(\"img\", {\n            src: field.iconPath,\n            className: UserFormStyles.FieldIcon,\n            alt: field.label,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }\n          })), __jsx(TextField, _extends({\n            id: field.name\n          }, input, rest, {\n            placeholder: field.placeholder,\n            type: field.type,\n            error: isFieldError(meta),\n            label: field.label,\n            className: UserFormStyles.TextField,\n            variant: \"outlined\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }\n          })), __jsx(ErrorMessage, {\n            meta: meta,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }\n          }));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }), fields.length - 1 !== field.id ? __jsx(\"div\", {\n        className: UserFormStyles.Divider,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }) : null);\n    });\n  };\n\n  return __jsx(Paper, {\n    className: UserFormStyles.UserFormMuiPaper,\n    style: isFormOpen ? {\n      display: \"block\"\n    } : {\n      display: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, __jsx(Form, {\n    onSubmit: handleFormSubmit,\n    validate: validateForm,\n    render: function render(_ref3) {\n      var handleSubmit = _ref3.handleSubmit,\n          values = _ref3.values;\n      return __jsx(\"form\", {\n        onSubmit: handleSubmit,\n        className: UserFormStyles.UserForm,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, __jsx(\"section\", {\n        className: UserFormStyles.MainFormContent,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, renderUserForm(fields)), __jsx(\"button\", {\n        type: \"submit\",\n        className: UserFormStyles.SubmitButton,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\"));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(UserForm, \"4P7KcR+/j0aEKeTIpJdOMtDvB9E=\");\n\n_c = UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["C:/Users/vstepnova/Desktop/test sunlight/components/UserForm.js"],"names":["useState","Paper","Form","Field","TextField","UserFormStyles","validateForm","isFieldError","ErrorMessage","fields","id","name","label","placeholder","type","iconPath","UserForm","isFormOpen","handleDialogOpen","isError","setError","handleFormSubmit","values","console","log","renderUserForm","map","field","input","meta","rest","FieldItem","FieldIcon","length","Divider","UserFormMuiPaper","display","handleSubmit","MainFormContent","SubmitButton"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\r\nimport { validateForm, isFieldError } from \"../utils/validate\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\n\r\nconst fields = [\r\n  {\r\n    id: 0,\r\n    name: \"userName\",\r\n    label: \"Фамилия и имя\",\r\n    placeholder: \"Укажите Вашу вамилию и имя\",\r\n    type: \"text\",\r\n    iconPath: \"/badge.png\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"email\",\r\n    label: \"E-mail\",\r\n    placeholder: \"ivanova@mail.ru\",\r\n    type: \"email\",\r\n    iconPath: \"/mail.png\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"phoneNumber\",\r\n    label: \"Номер телефона\",\r\n    type: \"tel\",\r\n    placeholder: \"Укажите номер телефона\",\r\n    iconPath: \"/phone.png\",\r\n  },\r\n];\r\n\r\nexport default function UserForm({ isFormOpen, handleDialogOpen }) {\r\n  const [isError, setError] = useState(false);\r\n\r\n  const handleFormSubmit = (values) => {\r\n    handleDialogOpen();\r\n    // axios\r\n    //   .post(\"http://localhost:3005/api\", JSON.stringify(values))\r\n    //   .catch((error) => console.log(error.response));\r\n\r\n    console.log(values);\r\n  };\r\n\r\n  const renderUserForm = (fields) =>\r\n    fields.map((field) => (\r\n      <React.Fragment key={field.id}>\r\n        <Field\r\n          name={field.name}\r\n          className={UserFormStyles.TextField}\r\n          render={({ input, meta, ...rest }) => (\r\n            <div className={UserFormStyles.FieldItem}>\r\n              <label htmlFor={field.id}>\r\n                <img\r\n                  src={field.iconPath}\r\n                  className={UserFormStyles.FieldIcon}\r\n                  alt={field.label}\r\n                />\r\n              </label>\r\n              <TextField\r\n                id={field.name}\r\n                {...input}\r\n                {...rest}\r\n                placeholder={field.placeholder}\r\n                type={field.type}\r\n                error={isFieldError(meta)}\r\n                label={field.label}\r\n                className={UserFormStyles.TextField}\r\n                variant=\"outlined\"\r\n              />\r\n              <ErrorMessage meta={meta} />\r\n            </div>\r\n          )}\r\n        />\r\n        {fields.length - 1 !== field.id ? (\r\n          <div className={UserFormStyles.Divider} />\r\n        ) : null}\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return (\r\n    <Paper\r\n      className={UserFormStyles.UserFormMuiPaper}\r\n      style={isFormOpen ? { display: \"block\" } : { display: \"none\" }}\r\n    >\r\n      <Form\r\n        onSubmit={handleFormSubmit}\r\n        validate={validateForm}\r\n        render={({ handleSubmit, values }) => (\r\n          <form onSubmit={handleSubmit} className={UserFormStyles.UserForm}>\r\n            <section className={UserFormStyles.MainFormContent}>\r\n              {renderUserForm(fields)}\r\n            </section>\r\n\r\n            <button type=\"submit\" className={UserFormStyles.SubmitButton}>\r\n              Сохранить изменения\r\n            </button>\r\n            {/* <p className={UserFormStyles.SuccessMessage}>\r\n              Изменения сохранены! (но это не точно)\r\n            </p> */}\r\n          </form>\r\n        )}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}