{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vstepnova\\\\Desktop\\\\test1\\\\components\\\\UserForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Paper from \"@material-ui/core/Paper\";\nimport { Form, Field } from \"react-final-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useMachine } from \"@xstate/react\";\nimport { Machine } from \"xstate\";\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\nimport { userInfoConfig } from \"../xstate/userInfo.js\";\nconst styles = {\n  MuiPaper: {\n    background: \"#FFFFFF\",\n    padding: 45,\n    boxSizing: \"border-box\",\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.15)\",\n    borderRadius: 10\n  },\n  TextField: {\n    height: 57,\n    width: 254,\n    left: 0\n  }\n};\nconst fields = [{\n  id: 0,\n  name: \"userName\",\n  label: \"Фамилия и имя\",\n  iconPath: \"/badge.png\"\n}, {\n  id: 1,\n  name: \"email\",\n  label: \"E-mail\",\n  iconPath: \"/mail.png\"\n}, {\n  id: 2,\n  name: \"phoneNumber\",\n  label: \"Номер телефона\",\n  iconPath: \"/phone.png\"\n}];\nexport default function UserForm() {\n  // const userInfo = Machine(userInfoConfig);\n  // const [info, send] = useMachine(userInfo);\n  const handleFormSubmit = values => console.log(\"values\", values);\n\n  const renderUserForm = fields => fields.map(field => __jsx(React.Fragment, {\n    key: field.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(Field, {\n    name: field.name,\n    style: styles.TextField,\n    render: (_ref) => {\n      let {\n        input,\n        meta\n      } = _ref,\n          rest = _objectWithoutProperties(_ref, [\"input\", \"meta\"]);\n\n      return __jsx(\"div\", {\n        className: UserFormStyles.FieldItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: field.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }, __jsx(\"img\", {\n        src: field.iconPath,\n        className: UserFormStyles.FieldIcon,\n        alt: field.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      })), __jsx(TextField, _extends({\n        id: field.name\n      }, input, rest, {\n        label: field.label,\n        style: styles.TextField,\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      })));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), fields.length - 1 !== field.id ? __jsx(\"div\", {\n    className: UserFormStyles.Divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }) : null));\n\n  return __jsx(Paper, {\n    style: styles.MuiPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(Form, {\n    onSubmit: handleFormSubmit // send({ type: \"SUBMIT\" })\n    // validate={validate}\n    ,\n    render: ({\n      handleSubmit,\n      values\n    }) => __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      className: UserFormStyles.UserForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, __jsx(\"section\", {\n      className: UserFormStyles.MainFormContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, renderUserForm(fields)), __jsx(\"button\", {\n      type: \"submit\",\n      className: UserFormStyles.SubmitButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/vstepnova/Desktop/test1/components/UserForm.js"],"names":["Paper","Form","Field","TextField","useMachine","Machine","UserFormStyles","userInfoConfig","styles","MuiPaper","background","padding","boxSizing","boxShadow","borderRadius","height","width","left","fields","id","name","label","iconPath","UserForm","handleFormSubmit","values","console","log","renderUserForm","map","field","input","meta","rest","FieldItem","FieldIcon","length","Divider","handleSubmit","MainFormContent","SubmitButton"],"mappings":"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","sourcesContent":["import Paper from \"@material-ui/core/Paper\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useMachine } from \"@xstate/react\";\r\nimport { Machine } from \"xstate\";\r\n\r\nimport UserFormStyles from \"../styles/UserForm.module.scss\";\r\nimport { userInfoConfig } from \"../xstate/userInfo.js\";\r\n\r\nconst styles = {\r\n  MuiPaper: {\r\n    background: \"#FFFFFF\",\r\n    padding: 45,\r\n    boxSizing: \"border-box\",\r\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.15)\",\r\n    borderRadius: 10,\r\n  },\r\n  TextField: {\r\n    height: 57,\r\n    width: 254,\r\n    left: 0,\r\n  },\r\n};\r\n\r\nconst fields = [\r\n  { id: 0, name: \"userName\", label: \"Фамилия и имя\", iconPath: \"/badge.png\" },\r\n  { id: 1, name: \"email\", label: \"E-mail\", iconPath: \"/mail.png\" },\r\n  {\r\n    id: 2,\r\n    name: \"phoneNumber\",\r\n    label: \"Номер телефона\",\r\n    iconPath: \"/phone.png\",\r\n  },\r\n];\r\n\r\nexport default function UserForm() {\r\n  // const userInfo = Machine(userInfoConfig);\r\n  // const [info, send] = useMachine(userInfo);\r\n\r\n  const handleFormSubmit = (values) => console.log(\"values\", values);\r\n\r\n  const renderUserForm = (fields) =>\r\n    fields.map((field) => (\r\n      <React.Fragment key={field.id}>\r\n        <Field\r\n          name={field.name}\r\n          style={styles.TextField}\r\n          render={({ input, meta, ...rest }) => (\r\n            <div className={UserFormStyles.FieldItem}>\r\n              <label htmlFor={field.id}>\r\n                <img\r\n                  src={field.iconPath}\r\n                  className={UserFormStyles.FieldIcon}\r\n                  alt={field.label}\r\n                />\r\n              </label>\r\n              <TextField\r\n                id={field.name}\r\n                {...input}\r\n                {...rest}\r\n                label={field.label}\r\n                style={styles.TextField}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          )}\r\n        />\r\n        {fields.length - 1 !== field.id ? (\r\n          <div className={UserFormStyles.Divider} />\r\n        ) : null}\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return (\r\n    <Paper style={styles.MuiPaper}>\r\n      <Form\r\n        onSubmit={handleFormSubmit}\r\n        // send({ type: \"SUBMIT\" })\r\n        // validate={validate}\r\n        render={({ handleSubmit, values }) => (\r\n          <form onSubmit={handleSubmit} className={UserFormStyles.UserForm}>\r\n            <section className={UserFormStyles.MainFormContent}>\r\n              {renderUserForm(fields)}\r\n            </section>\r\n\r\n            <button type=\"submit\" className={UserFormStyles.SubmitButton}>\r\n              Сохранить изменения\r\n            </button>\r\n            {/* <p className={UserFormStyles.SuccessMessage}>\r\n              Изменения сохранены!\r\n            </p> */}\r\n          </form>\r\n        )}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}